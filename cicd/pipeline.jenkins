// Generic pipeline that drives the build, test, and promotion of a ZOSOpenTools project
// This pipeline is called via https://128.168.139.253:8443/view/Framework/job/Port-Pipeline/
// Inputs:
//   PORT_GITHUB_REPO : Github repository (e.g. https://github.com/ZOSOpenTools/makeport.git)
//   PORT_BRANCH : (default: main)
//   PORT_DESCRIPTION : Description of the project
def repo = params.get("PORT_GITHUB_REPO") 
def branch = params.get("PORT_BRANCH") 
def description = params.get("PORT_DESCRIPTION") 

//TODO: Store results into vars if we want to publish to Slack in the future
def buildResult = [:]
def promoteResult = [:]
def testStatus = "Skipped"

node('linux') 
{
  stage('Build and Test') {
    try {
    // Build Job : https://128.168.139.253:8443/view/Framework/job/Port-Build/
    buildResult = build job: 'Port-Build', parameters: [string(name: 'PORT_GITHUB_REPO', value: "${repo}"), string(name: 'PORT_BRANCH', value: "${branch}"), booleanParam(name: 'RUN_TESTS', value: params.RUN_TESTS) ]
    } catch (Exception e) {
      handleError(e, repo)
    }
    copyArtifacts filter: 'test.status',
	fingerprintArtifacts: true,
	projectName: 'Port-Build',
	selector: specific(buildResult.number.toString()),
	optional: true
    if (fileExists('test.status')) {
    	testStatus = readFile file: 'test.status'
    }
  }
  
  stage('Promote') {
    try {
      // Publish Job : https://128.168.139.253:8443/view/Framework/job/Port-Publish/
      promoteResult = build job: 'Port-Publish', parameters: [string(name: 'BUILD_SELECTOR', value: "<SpecificBuildSelector plugin=\"copyartifact@1.46.2\">  <buildNumber>${buildResult.number.toString()}</buildNumber></SpecificBuildSelector>"), string(name: 'PORT_GITHUB_REPO', value: "${repo}"), string(name: 'PORT_DESCRIPTION', value: "${description}")]
    } catch (Exception e) {
      handleError(e, repo)
    }
  }
 
  stage ('Cleanup') {
    slackSend message: "Build for ${repo} successful <${currentBuild.absoluteUrl}|Build #${currentBuild.number}>\nTest Status: ${testStatus}"
  }
}

def handleError(e, repo, reason="unknown") {
  if (e && e.getMessage()) {
    reason = e.getMessage()
  } else if (env.STAGE_NAME) {
    reason = "failure in ${env.STAGE_NAME.toLowerCase()} stage"
  }
  slackSend color: 'danger',
            message: "${repo}:\n<${currentBuild.absoluteUrl}|Build #${currentBuild.number}> *Failed*\n*Reason:* _${reason}_"
  throw e
}
