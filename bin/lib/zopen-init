#!/bin/sh
# Initialize zopen

if [ -z "$utildir" ]; then
  export utildir="$( cd "$(dirname "$0")" >/dev/null 2>&1 && pwd -P )"
fi
. "${utildir}/common.inc"

printSyntax() 
{
  args=$*
  echo "zopen init will initialize the zopen filesystem and configuration (create a $HOME/.zopen-config file)" >&2
  echo "Syntax: zopen init [<option>] [<root-dir>]" >&2
  echo "  where <option> can be one or more of:" >&2
  echo "  -f <type>: virtual filesystem location for package management; packages will be installed to this location under the <root-dir>" >&2
  echo "      usrlclz - /usr/local/zopen (default);" >&2 
  echo "      zopen - /usr/zopen (default);" >&2
  echo "      prod - zopen standard;" >&2
  echo "      ibm  - /usr/lpp;" >&2
  echo "      fhs  - File Hierarchical Standard (/opt)"  >&2
  echo "      usrlcl - /usr/local;">&2
  echo "  --re-init - re-initialize a previous installation (if present).  Re-initializing over a previous installation will re-use existing package structures and configurations." >&2
  echo "  --clone - clones the current installation to a different location" >&2
  echo "  -v: run in verbose mode" >&2
  echo "  -?: display help" >&2
}

args=$*

verbose=false
reinitExisting=false
clone=false
fslayout="usrlclz"
while [ $# -gt 0 ]; do
  case "$1" in
    "-f" | "--fs-layout" )
      fslayout=$2
      shift
      ;;
    "--re-init" )
      reinitExisting=true
      ;;
    "--clone" )
      clone=true
      ;;
    "-h" | "--h" | "-help" | "--help" | "-?" | "-syntax")
      printSyntax "${args}"
      exit 4
      ;;
    "-v" | "--v" | "-verbose" | "--verbose")
       verbose=true
      ;;
    *)
      rootfs=$1;
      ;;
  esac
  shift;
done
case "$fslayout" in
  fhs|ibm|prod|zopen|usrlcl|usrlclz)
  ;;
  *)
    printError "${NC}${RED}The filesystem layout $fslayout is unrecognised"
    ;;
esac
printHeader "Initialize zopen framework"

configFile="$HOME/.zopen-config"

if $clone; then
  [ ! -e "$configFile" ] && printError "- Unable to clone existing configuration; configuration file $configFile could not be read"
  printInfo "- Cloning existing configuration"
  configFile=".zopen-config.clone"
elif [ -e "$configFile" ]; then
  if ! $reinitExisting; then
    printWarning "- Existing configuration file found; re-initializing might lose access to previously installed packages. Continue (y/n)?"
    read reinit < /dev/tty
  fi
  if $reinitExisting || { [ -n "$reinit" ] && [ "y" = "${reinit}" ]; }; then
    printInfo "- Re-initializing; removing existing .zopen-config"
    rmrf=$(rm -rf "$configFile")
  else
    printWarning "- Stopping. Pre-existing configuration will be preserved"
    exit 8
  fi
fi

if [ -n "$ZOPEN_ROOT_PATH" ]; then
  rootfs="$ZOPEN_ROOT_PATH"
  printInfo "- Setting root directory from ZOPEN_ROOT_PATH envvar: $rootfs"
fi

if [ -z "$rootfs" ]; then
  if $clone; then
    printInfo "- Enter fully-qualified path to clone-target directory:"
  else
    printInfo "- Enter fully-qualified path to your zopen root directory (default: $HOME/zopen)"
  fi
  read rootfs < /dev/tty
else
  printInfo "- Setting root directory from cli: $rootfs"
fi

if [ -z "$rootfs" ]; then
  if $clone; then
    printError "- No target location for clone. Stopping."
  fi
  printInfo "- No explicit root set, using default: \$HOME/zopen"
  rootfs="$HOME/zopen"
else
  if [ "${rootfs%/}" = '/' ]; then
    printInfo "- Stripping trailing '/' char"
    rootfs="${rootfs%})"
  fi
  if [ "$rootfs" = "/" ]; then
    printInfo "- Installing into system root; are you sure (y/N)?"
    read sysrootok < /dev/tty
    if [ -n "$sysrootok" ] && [ "y" = "${sysrootok}" ]; then
      printInfo "- Using '/'as root filesystem"
      rootfs="/." # references below take a root directory
    else
      exit 4
    fi
  fi
fi

if [ -n "$ZOPEN_GIT_OAUTH_TOKEN" ]; then
  printInfo "- Found existing envvar: ZOPEN_GIT_OAUTH_TOKEN; reuse value (y/n)?"
  read foundGitOauth < /dev/tty
  if [ -n "$foundGitOauth" ] && [ "y" = "${foundGitOauth}" ]; then
    zopen_oauth="export ZOPEN_GIT_OAUTH_TOKEN=$ZOPEN_GIT_OAUTH_TOKEN"
  else
    unset ZOPEN_GIT_OAUTH_TOKEN
  fi
fi

if [ -z "$ZOPEN_GIT_OAUTH_TOKEN" ]; then
  printInfo "- Enter the github oauth token for use in zopen-download. If none (not recommended), press enter"
  addCleanupTrapCmd "stty echo"
  stty -echo
  read zopen_oauth < /dev/tty
  stty echo
  if [ -n "$zopen_oauth" ]; then
    zopen_oauth="export ZOPEN_GIT_OAUTH_TOKEN=$zopen_oauth"
  else
    # Placeholder in the .zopen-config
    zopen_oauth="export ZOPEN_GIT_OAUTH_TOKEN="
  fi
fi

if ! $clone; then
  printInfo "Checking for existence of specified root: '$rootfs'"
  [ -e "$rootfs" ] || mkdir -p "$rootfs" || printError "Unable to create zopen root filesystem at '$rootfs'"
  [ -d "$rootfs" ] || printError "Specified location '$rootfs' is not a directoryUnable to access root file system at '$rootfs'; check permissions"  
  [ -w "$rootfs" ] || printError "Unable to access root file system at '$rootfs'; check permissions"  
  printInfo "- Populating standard file system"
  [ -e "$rootfs/bin" ] || mkdir -p "$rootfs/bin"
  [ -e "$rootfs/etc" ] || mkdir -p "$rootfs/etc"
  [ -e "$rootfs/etc/skel" ] || mkdir -p "$rootfs/etc/skel"
  [ -e "$rootfs/include" ] || mkdir -p "$rootfs/include"
  [ -e "$rootfs/usr/share" ] || mkdir -p "$rootfs/usr/share"
  [ -e "$rootfs/usr/share/man" ] || mkdir -p "$rootfs/usr/share/man"
  [ -e "$rootfs/usr/share/zopen" ] || mkdir -p "$rootfs/usr/share/zopen"
  [ -e "$rootfs/var/cache/zopen" ] || mkdir -p "$rootfs/var/cache/zopen"
  [ -e "$rootfs/var/log" ] || mkdir -p "$rootfs/var/log"
  [ -e "$rootfs/var/tmp" ] || mkdir -p "$rootfs/var/tmp"
  
  printInfo "- Creating path for bootstrap files"
  [ -e "$rootfs/boot" ] || mkdir -p "$rootfs/boot"
  
  printInfo "- Creating symbolic path for prod redirect files"
  [ -e "$rootfs/usr/share/zopen/boot" ] || ln -s "$rootfs/boot" "$rootfs/usr/share/zopen/boot"
  case "$fslayout" in
    "usrlclz")
      zopen_pkginstall="usr/local/zopen"
    ;;
    "usrlcl")
      zopen_pkginstall="usr/local"
    ;;
    "fhs")
      zopen_pkginstall="opt"
    ;;
    "ibm")
      zopen_pkginstall="usr/lpp"
    ;;
    "prod")
      zopen_pkginstall="prod"
    ;;
    "zopen")
      zopen_pkginstall="usr/zopen"
    ;;
  esac
  [ -e "$rootfs/etc/zopen" ] || mkdir -p "$rootfs/etc/zopen"
  echo "$zopen_pkginstall" > "$rootfs/etc/zopen/fstype"
  
  [ -e "$rootfs/$zopen_pkginstall" ] || mkdir -p "$rootfs/$zopen_pkginstall"
  [ -e "$rootfs/usr/share/zopen/prod" ] || ln -s "$rootfs/$zopen_pkginstall" "$rootfs/usr/share/zopen/prod"
else
  printVerbose "Grabbing pkginstall location from within cloned env"
  if [ -e "$ZOPEN_ROOTFS/etc/zopen/fstype" ]; then
    zopen_pkginstall=$(cat "$rootfs/etc/zopen/fstype")
  else
    printError "Unable to locate $ZOPEN_ROOTFS/etc/zopen/fstype; cannot clone unrecognisable file system"
  fi
fi

if [ "$ZOPEN_PKGINSTALL" = "$rootfs" ]; then
   printWarning "Package install location is the zopen root location; this is not recommended. Continue (y/n)"
   read pkgoverlaysrootfs < /dev/tty
   if [ -n "$pkgoverlaysrootfs" ] && [ "y" = "${pkgoverlaysrootfs}" ]; then
     printInfo "- Continuing. Packages will be installed into the zopen root location: $rootfs"
   else
     printWarning "- Stopping. Existing configuration will be preserved"
     exit 8
   fi
fi

ZOPEN_CA_DIR="etc/pki/tls/certs"  # TODO: Work out "proper" location
if ! $clone; then
    printInfo "- Creating path for certificate lookups"
    [ -e "$rootfs/$ZOPEN_CA_DIR" ] || mkdir -p "$rootfs/$ZOPEN_CA_DIR"
fi

# Save the configuration to the file - overwrite any existing file with the title initially
echo "# z/OS Open Tools Configuration file" > "$configFile"
echo "# Main root location for the zopen installation; can be changed if the " >> "$configFile"
echo "# underlying root location is copied/moved elsewhere as locations are " >> "$configFile"
echo "# relative to this envvar value" >> "$configFile"
echo "ZOPEN_ROOTFS=$rootfs" >> "$configFile"
echo "export ZOPEN_ROOTFS" >> "$configFile"
echo "configStartTime=\$SECONDS" >> "$configFile"
echo "zot=\"z/OS Open Tools\"" >> "$configFile"

# Add the profiled processing first so the zopen paths are added first
cat << EOF >>  "$configFile"
TMP_FIFO_PIPE="\$configFile.pipe"
atExit() {
  sig=\$?
  [ -p \$TMP_FIFO_PIPE ] && rm -rf \$TMP_FIFO_PIPE
  trap - EXIT INT TERM QUIT HUP
  exit \$sig
}

trap "atExit" EXIT INT TERM QUIT HUP
sanitizeEnvVar(){
  #remove any envvar entries that match the specified regex
  value=\$1
  delim=\$2
  prefix=\$3
  echo "\$value" | awk -v RS="\$delim" -v DLIM="\$delim" -v PRFX="\$prefix" '{ if (match(\$1, PRFX)==0) {printf("%s%s",\$1,DLIM)}}'
}
deleteDuplicateEntries() 
{
  value=\$1
  delim=\$2
  echo "\$value\$delim" | awk -v RS="\$delim" '!(\$0 in a) {a[\$0]; printf("%s%s", col, \$0); col=RS; }' | sed "s/\${delim}$//"
}
ZOPEN_PKGINSTALL=\$ZOPEN_ROOTFS/$zopen_pkginstall
export ZOPEN_PKGINSTALL
ZOPEN_SEARCH_PATH=\$ZOPEN_ROOTFS/usr/share/zopen/
export ZOPEN_SEARCH_PATH
ZOPEN_CA=\$ZOPEN_ROOTFS/$ZOPEN_CA_DIR/cacert.pem
export ZOPEN_CA
ZOPEN_LOG_PATH=\$ZOPEN_ROOTFS/var/log
export ZOPEN_LOG_PATH
PATH=\$ZOPEN_ROOTFS/usr/bin:\$ZOPEN_ROOTFS/bin:\$ZOPEN_ROOTFS/boot:\$(sanitizeEnvVar \"\$PATH\" \":\" \"^\$ZOPEN_PKGINSTALL/.*\$\")
PATH=\$(deleteDuplicateEntries \"\$PATH\" \":\")
LIBPATH=\$ZOPEN_ROOTFS/usr/lib:\$(sanitizeEnvVar "\$LIBPATH" ":" "^\$ZOPEN_PKGINSTALL/.*\$")
LIBPATH=\$(deleteDuplicateEntries \"\$LIBPATH\" \":\")
MANPATH=\$ZOPEN_ROOTFS/usr/share/man:\$ZOPEN_ROOTFS/usr/share/man/\%L:\$(sanitizeEnvVar \"\$MANPATH\" \":\" \"^\$ZOPEN_PKGINSTALL/.*\$\")
MANPATH=\$(deleteDuplicateEntries \"\$MANPATH\" \":\")

if [ -e "\$ZOPEN_ROOTFS/etc/profiled" ]; then
  dotenvs=\$(find "\$ZOPEN_ROOTFS/etc/profiled" -type f -name 'dotenv' -print)
  dotenvcnt=\$(echo "\$dotenvs" | wc -l | tr -d ' ')
  flecnt=0
  [ ! -p \$TMP_FIFO_PIPE ] || rm -f \$TMP_FIFO_PIPE
  mkfifo \$TMP_FIFO_PIPE
  echo "\$dotenvs" | xargs | tr ' ' '\n'>>\$TMP_FIFO_PIPE &
  while read FILE; do
      flecnt=\$(expr \$flecnt + 1)
      pct=\$(expr \$flecnt \* 100)
      pct=\$(expr \$pct / \$dotenvcnt)
    /bin/echo "\047[1A\047[$30D\047[2K- Processing \$zot configuration: \${pct}% (\${flecnt}/\${dotenvcnt})"
    [ -e \$FILE ] && . \$FILE
    PATH=\$ZOPEN_ROOTFS/usr/bin:\$ZOPEN_ROOTFS/bin:\$ZOPEN_ROOTFS/boot:\$(sanitizeEnvVar \"\$PATH\" \":\" \"^\$ZOPEN_PKGINSTALL/.*\$\")
    PATH=\$(deleteDuplicateEntries \"\$PATH\" \":\")
    LIBPATH=\$ZOPEN_ROOTFS/usr/lib:\$(sanitizeEnvVar "\$LIBPATH" ":" "^\$ZOPEN_PKGINSTALL/.*\$")
    LIBPATH=\$(deleteDuplicateEntries \"\$LIBPATH\" \":\")
    MANPATH=\$ZOPEN_ROOTFS/usr/share/man:\$ZOPEN_ROOTFS/usr/share/man/\%L:\$(sanitizeEnvVar \"\$MANPATH\" \":\" \"^\$ZOPEN_PKGINSTALL/.*\$\")
    MANPATH=\$(deleteDuplicateEntries \"\$MANPATH\" \":\")
  done < \$TMP_FIFO_PIPE
  [ ! -p \$TMP_FIFO_PIPE ] || rm -f \$TMP_FIFO_PIPE
  /bin/echo "\047[1A\047[\$30D\047[2K- Processed \$zot configuration: 100% (\${dotenvcnt}/\${dotenvcnt})"
  unset dotenvs dotenvcnt flecnt
fi
MANPATH="\$MANPATH:"
export MANPATH
export LIBPATH
export PATH
EOF

# The skeleton configuration file should NOT hold the installer's GIT oauth
# token but should supply their own; only write any oauth token to the real not
# skeleton file
skeletonDir="$rootfs/etc/skel"
skelcfg="$skeletonDir/.zopen-config"
printVerbose "Copying configuration file to $skeletonDir for backup/distribution"
cp "$configFile" "$skelcfg"
printVerbose "Adding git oauth token placeholder and footer to skeleton file"
cat << EOF >>  "$skelcfg"
# It is strongly advised to setup and use a Github Access Token
export ZOPEN_GIT_OAUTH_TOKEN=
/bin/echo "- \$zot configuration completed in \$(( \$SECONDS - \$configStartTime )) seconds."
EOF
perms="744"
printVerbose "Giving world read access to skel config file"
chmod "$perms" "$skelcfg"

printVerbose "Adding 'real' git oauth token (or placeholder) and footer to user config file"
cat << EOF >>  "$configFile"
$zopen_oauth
/bin/echo "- \$zot configuration completed in \$(( \$SECONDS - \$configStartTime )) seconds."
EOF

perms="400"
printVerbose "Setting user configuration file [$configFile] as read-only for user, no access to others [$perms]"
chmod "$perms" "$configFile"
effuid=$LOGNAME
effgid=$(id -gn $effuid)
printVerbose "Ensuring correct uid [$effuid] & gid [$effgid] for configfile if !installing as user (ie su/root/etc)"
chown "$effuid" "$configFile"
chgrp "$effgid" "$configFile"
printInfo "- Created config in $configFile."

printInfo "- Root FS available at $rootfs"

if $clone; then
  printInfo "- Cloning from $ZOPEN_ROOTFS to $rootfs"
  cp -RT "$ZOPEN_ROOTFS" "$rootfs"
  printInfo "${NC}${CYAN}- Run '. $configFile' to enable cloned environment for current session${NC}"
  printInfo "${NC}${CYAN}- or manually copy cloned configuration to required location and/or modify .profile"
  syslog "$ZOPEN_LOG_PATH/audit.log" "$LOG_A" "$CAT_PACKAGE,$CAT_FILE" "INIT" "" "zopen environment cloned to $rootfs"
  printInfo "${NC}${GREEN}zopen clone complete.${NC}"
else
  export ZOPEN_ROOTFS="$rootfs"

  # Generate any system values that can be user changed
  echo "15" > "$rootfs/etc/zopen/rm_fileprocs"

  printInfo "- Check for shipped curl pax"
  curlpax="curl-8.1.2.20230707_145137.zos.pax.Z"

  curllcn=$(findrev "${utildir}" "$curlpax")
  if [ -e "$curllcn/$curlpax" ]; then
    printInfo "- Found $curlpax. Adding to zopen cache to install as bootstrap"
    cp "$curllcn/$curlpax" "$rootfs/var/cache/zopen"
  else
    printInfo "- Downloading curl to cache using HWT"
    curlurl="https://github.com/ZOSOpenTools/curlport/releases/download/Releaseline_curlport_1136/$curlpax"
    printInfo "- Running REXX bootstrap"
    bootstrap=$($utildir/zopen-bootstrap.rexx $curlurl)
    printInfo "- Bootstrapped curl downloaded. Configuring for use..."
  fi
  printVerbose "- Expanding curl to bootstrap dir..."
  cachedir="$rootfs/var/cache/zopen"
  [ -e "$cachedir/$curlpax" ] || printError "Could not locate bootstrap curl pax."
  paxrc=$(pax -rf "$cachedir/$curlpax" -s##$rootfs/boot/#)

  printInfo "- Check for shipped jq pax"
  jqpax="jq-1.6.20230705_132543.zos.pax.Z"

  jqlcn=$(findrev "${utildir}" "$jqpax")
  echo "HERE: $jqlcn/$jqpax"
  if [ -e "$jqlcn/$jqpax" ]; then
    printInfo "- Found $jqpax. Adding to zopen cache to install as bootstrap"
    cp "$jqlcn/$jqpax" "$rootfs/var/cache/zopen"
  else
    printError "jqpax not found"
  fi
  printVerbose "- Expanding jq to bootstrap dir..."
  cachedir="$rootfs/var/cache/zopen"
  [ -e "$cachedir/$jqpax" ] || printError "Could not locate bootstrap jq pax."
  paxrc=$(pax -rf "$cachedir/$jqpax" -s##$rootfs/boot/#)
  echo $rootfs/boot/

  cacertlcn=$(findrev "${utildir}" "cacert.pem")
  if [ -e "$cacertlcn/cacert.pem" ]; then
    printInfo "- Found default cacert.pem; copying to zopen file system"
    cp "$cacertlcn/cacert.pem" "$ZOPEN_ROOTFS/$ZOPEN_CA_DIR"
  else
    printError "Could not locate default cacert.pem at '../cacert.pem'."
  fi

  if [ -r "$ZOPEN_ROOTFS/$ZOPEN_CA_DIR/cacert.pem" ]; then
    printInfo "- Setting certificate envvar"
    export SSL_CERT_FILE="$ZOPEN_ROOTFS/$ZOPEN_CA_DIR/cacert.pem"
  else
    printError "- Could not locate cacert.pem at '$ZOPEN_ROOTFS/$ZOPEN_CA_DIR'"
  fi
  
  # Need to source the .env file from within the actual curl directory and cannot
  # spawn sub-process otherwise no access to environment from this script so run inline
  curldir="$(ls $rootfs/boot |grep curl)"
  [ -e "$rootfs/boot/$curldir" ] || printError "Could not locate curl for bootstrap. Re-run 'zopen init' to retry"
  chmod -R 755 "$rootfs/boot/$curldir"
  curwd=$PWD
  cd "$rootfs/boot/$curldir/" || printError "Could not access boot curl directory. Re-run 'zopen init' to retry"
  . ./.env
  cd "$curwd"  || printError "Could not change to $curwd. Re-run 'zopen init' to retry"

  jqdir="$(ls $rootfs/boot |grep jq)"
  [ -e "$rootfs/boot/$jqdir" ] || printError "Could not locate jq for bootstrap. Re-run 'zopen init' to retry"
  chmod -R 755 "$rootfs/boot/$jqdir"
  curwd=$PWD
  cd "$rootfs/boot/$jqdir/" || printError "Could not access boot curl directory. Re-run 'zopen init' to retry"
  . ./.env
  cd "$curwd"  || printError "Could not change to $curwd. Re-run 'zopen init' to retry"
  
  printInfo "- Updating CA cert"
  ZOPEN_CA="$ZOPEN_ROOTFS/$ZOPEN_CA_DIR"
  mkdir -p "$ZOPEN_CA"
  ZOPEN_CA="$ZOPEN_CA/cacert.pem"
  export ZOPEN_CA
  runAndLog "${utildir}/zopen-update-cacert -f"
  printInfo "- Sourcing environment"
  . "$configFile"
  printInfo "- Using bootstrapped curl and jq to install latest release of itself (if available)"
  curlInstall=$(runAndLog "${utildir}/zopen-download curl jq")
  curlInstall=$?
  [ $curlInstall -ne 0 ] && printError "Unable to install curl and jq; see previous errors and retry the initilisation using the '--re-init' parameter"
  . "$configFile"

  # Code to use this version of meta as "official" install - pin to ensure no overwriting
  printInfo "- Installing and pinning currently running version of meta" 
  printVerbose "Current dir: $utildir"
  metadtInstDir="$ZOPEN_ROOTFS/$zopen_pkginstall/meta-dt"
  printVerbose "Meta will be installed to $metadtInstDir"
  mkdir -p "$metadtInstDir"

  if [ -L "$0" ]; then
    printVerbose "Found a link"
    # We are running zopen from within a zopen-environment already
    # De-reference symlinks to get the actual meta location. On a re-init,
    # this might correlate to the existing location so we can reuse it; otherwise
    # we need to copy the existing meta to the new location
    physical="$(ls -l "$0" | sed -e "s/.*-> //")" 
    full="$(dirname $0)/$physical"
    real="$(dirname $full)"
    deref="$( cd "$real/../.." >/dev/null 2>&1 && pwd -P )"
    
    if [ "$deref" = "$metadtInstDir" ]; then
      printInfo "- Re-initialising target is current; no action required"
    else
      printInfo "- Copying existing meta to re-initialised location"
      cp -RT "$deref/"  "$metadtInstDir"
    fi
    
  else
    printVerbose "Copying local meta; work out where to find all files"
    cp -RT "${utildir}/../../"  "$metadtInstDir" 
  fi

  printInfo "- Running alternative utility to force selection of forked meta"
  # Can use "1" as the default since there should be no other options during init!
  metaInstall=$(runAndLog "${utildir}/zopen-alt meta -s -d 1")
  metaInstall=$?
  [ $metaInstall -ne 0 ] && printError "Unable to install meta; see previous errors and retry the initilisation using the '--re-init' parameter"

  #TODO: Reinstate following code should this fork merge
  #printInfo "- Installing latest version of meta package into zopen system"
  #runAndLog "${utildir}/zopen-download meta"

  printInfo "- zopen bootstrapping complete"

  printInfo "- Configure .profile to automatically source zopen environment (y/n)?"
  read profileEnable < /dev/tty
  if [ -n "$profileEnable" ] && [ "y" = "${profileEnable}" ]; then
    if ! grep -q ". \$HOME/.zopen-config" "$HOME/.profile"; then
      printVerbose "Line not present (grep returned non-0)"
  cat << EOF >>  "$HOME/.profile"
  [ -e "\$HOME/.zopen-config" ] && . \$HOME/.zopen-config
EOF
    fi
  fi
  printInfo "${NC}${YELLOW}- Run '. \$HOME/.zopen-config' to enable zopen environment for current session${NC}"
  syslog "$ZOPEN_LOG_PATH/audit.log" "$LOG_A" "$CAT_PACKAGE,$CAT_FILE" "INIT" "" "zopen environment initialised as $ZOPEN_ROOTFS"
  printInfo "${NC}${GREEN}zopen initialization complete.${NC}"
fi
