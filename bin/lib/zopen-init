#!/bin/sh
# Initialize zopen

echo $utildir
if [ -z "$utildir" ]; then
  export utildir="$( cd "$(dirname "$0")" >/dev/null 2>&1 && pwd -P )"
fi
. "${utildir}/common.inc"

printSyntax() 
{
  args=$*
  echo "zopen init will initialize the zopen filesystem and configuration (create a $HOME/.zopen-config file)" >&2
  echo "Syntax: zopen init [<option>] <root-dir>" >&2
  echo "  where <option> can be one or more of:" >&2
  echo "  -f <type>: use an alternative virtual filesystem layout" >&2
  echo "      zopen - /usr/zopen (default);" >&2
  echo "      prod - zopen standard;" >&2
  echo "      ibm  - /usr/lpp;" >&2
  echo "      fhs  - File Hierarchical Standard (/opt)"  >&2
  echo "  -v: run in verbose mode" >&2
  echo "  -?: display help" >&2
}

args=$*

verbose=false
layoutfs="zopen"
while [[ $# -gt 0 ]]; do
  case "$1" in
    "-f")
      layoutfs=$2
      shift
      ;;
    "-h" | "--h" | "-help" | "--help" | "-?" | "-syntax")
      printSyntax "${args}"
      exit 4
      ;;
    "-v" | "--v" | "-verbose" | "--verbose")
       verbose=true
      ;;
    *)
      rootfs=$1;
      ;;
  esac
  shift;
done
case "$layoutfs" in
  fhs|ibm|prod|zopen)
  ;;
  *)
    printError "${NC}${RED}The filesystem layout $layoutfs is unrecognised"
    ;;
esac
printHeader "Initialize zopen framework"
if [ ! -z "$ZOPEN_ROOT_PATH" ]; then
  rootfs="$ZOPEN_ROOT_PATH"
fi

if [ -z "$rootfs" ]; then
  printInfo "- Enter fully-qualified path to your zopen root directory (default: \$HOME/zopen)"
  rootfs=$(getInput)
fi

if [ -z "$rootfs" ]; then
  echo "Using default: \$HOME/zopen"
  rootfs="$HOME/zopen"
fi

echo "- Enter the github oauth token for use in zopen-download. If none (not recommended), press enter"
zopen_oauth=$(getInputHidden)
if [ ! -z "$zopen_oauth" ]; then
  zopen_oauth="export ZOPEN_GIT_OAUTH_TOKEN=$zopen_oauth"
else
  # Placeholder in the .zopen-config
  zopen_oauth="export ZOPEN_GIT_OAUTH_TOKEN="
fi

printInfo "- Populating standard file system"
[[ -e "$rootfs/bin" ]] || mkdir -p "$rootfs/bin"
[[ -e "$rootfs/etc" ]] || mkdir -p "$rootfs/etc"
[[ -e "$rootfs/include" ]] || mkdir -p "$rootfs/include"
[[ -e "$rootfs/usr/share" ]] || mkdir -p "$rootfs/usr/share"
[[ -e "$rootfs/usr/share/man" ]] || mkdir -p "$rootfs/usr/share/man"
[[ -e "$rootfs/usr/share/zopen" ]] || mkdir -p "$rootfs/usr/share/zopen"
[[ -e "$rootfs/var/cache/zopen" ]] || mkdir -p "$rootfs/var/cache/zopen"
[[ -e "$rootfs/var/log" ]] || mkdir -p "$rootfs/var/log"

printInfo "- Creating path for bootstrap files"
[[ -e "$rootfs/boot" ]] || mkdir -p "$rootfs/boot"

printInfo "- Creating symbolic path for prod redirect files"
[[ -e "$rootfs/usr/share/zopen/boot" ]] || ln -s "$rootfs/boot" "$rootfs/usr/share/zopen/boot"
case "$layoutfs" in
  "fhs")
    zopen_pkginstall="opt"
  ;;
  "ibm")
    zopen_pkginstall="usr/lpp"
    ;;
  "prod")
    zopen_pkginstall="prod"
  ;;
  "zopen")
    zopen_pkginstall="usr/zopen"
  ;;
esac
[[ -e "$rootfs/$zopen_pkginstall" ]] || mkdir -p "$rootfs/$zopen_pkginstall"
[[ -e "$rootfs/usr/share/zopen/prod" ]] || ln -s "$rootfs/$zopen_pkginstall" "$rootfs/usr/share/zopen/prod"

printInfo "- Creating path for certificate lookups"
ZOPEN_CA_DIR="etc/pki/tls/certs"  # TODO: Work out "proper" location
[[ -e "$rootfs/$ZOPEN_CA_DIR" ]] || mkdir -p "$rootfs/$ZOPEN_CA_DIR"

# Save the configuration to the file
echo "ZOPEN_ROOTFS=$rootfs" > "$HOME/.zopen-config"
echo "export ZOPEN_ROOTFS" >> "$HOME/.zopen-config"

# Add the profiled processing first so the zopen paths are added first
cat << EOF >>  "$HOME/.zopen-config"
TMP_FIFO_PIPE="\$HOME/.zopen-config.pipe"
atExit() {
  sig=$?
  [ -p $TMP_FIFO_PIPE ] && rm -rf $TMP_FIFO_PIPE
  trap - EXIT INT TERM QUIT HUP
  exit $sig
}

trap "atExit" EXIT INT TERM QUIT HUP
sanitizeEnvVar(){
  #remove any envvar entries that match the specified regex
  value=\$1
  delim=\$2
  prefix=\$3
  echo "\$value" | awk -v RS="\$delim" -v DLIM="\$delim" -v PRFX="\$prefix" '{ if (match(\$1, PRFX)==0) {printf("%s%s",\$1,DLIM)}}'
}
deleteDuplicateEntries() 
{
  value=\$1
  delim=\$2
  echo "\$value\$delim" | awk -v RS="\$delim" '!(\$0 in a) {a[\$0]; printf("%s%s", col, \$0); col=RS; }' | sed "s/\${delim}$//"
}
$zopen_oauth
ZOPEN_PKGINSTALL=\$ZOPEN_ROOTFS/$zopen_pkginstall
export ZOPEN_PKGINSTALL
ZOPEN_SEARCH_PATH=\$ZOPEN_ROOTFS/usr/share/zopen/
export ZOPEN_SEARCH_PATH
ZOPEN_CA=\$ZOPEN_ROOTFS/$ZOPEN_CA_DIR/cacert.pem
export ZOPEN_CA
ZOPEN_LOG_PATH=\$ZOPEN_ROOTFS/var/log
export ZOPEN_LOG_PATH
PATH=\$ZOPEN_ROOTFS/usr/bin:\$ZOPEN_ROOTFS/bin:\$ZOPEN_ROOTFS/boot:\$(sanitizeEnvVar \"\$PATH\" \":\" \"^\$ZOPEN_PKGINSTALL/.*\$\")
PATH=\$(deleteDuplicateEntries \"\$PATH\" \":\")
LIBPATH=\$ZOPEN_ROOTFS/usr/lib:\$(sanitizeEnvVar "\$LIBPATH" ":" "^\$ZOPEN_PKGINSTALL/.*\$")
LIBPATH=\$(deleteDuplicateEntries \"\$LIBPATH\" \":\")
MANPATH=\$ZOPEN_ROOTFS/usr/share/man:\$ZOPEN_ROOTFS/usr/share/man/\%L:\$(sanitizeEnvVar \"\$MANPATH\" \":\" \"^\$ZOPEN_PKGINSTALL/.*\$\")
MANPATH=\$(deleteDuplicateEntries \"\$MANPATH\" \":\")

if [[ -e "\$ZOPEN_ROOTFS/etc/profiled" ]]; then
  dotenvs=\$(find "\$ZOPEN_ROOTFS/etc/profiled" -type f -name 'dotenv' -print)
  dotenvcnt=\$(echo "\$dotenvs" | wc -l | tr -d ' ')
  flecnt=0
  [[ ! -p \$TMP_FIFO_PIPE ]] || rm -f \$TMP_FIFO_PIPE
  mkfifo \$TMP_FIFO_PIPE
  echo "\$dotenvs" | xargs | tr ' ' '\n'>>\$TMP_FIFO_PIPE &
  while read FILE; do
      flecnt=\$(expr \$flecnt + 1)
      pct=\$(expr \$flecnt \* 100)
      pct=\$(expr \$pct / \$dotenvcnt)
    /bin/echo "\047[1A\047[$30D\047[2K- Processing zopen config: \${pct}% (\${flecnt}/\${dotenvcnt})"
    . \$FILE
    PATH=\$ZOPEN_ROOTFS/usr/bin:\$ZOPEN_ROOTFS/bin:\$ZOPEN_ROOTFS/boot:\$(sanitizeEnvVar \"\$PATH\" \":\" \"^\$ZOPEN_PKGINSTALL/.*\$\")
    PATH=\$(deleteDuplicateEntries \"\$PATH\" \":\")
    LIBPATH=\$ZOPEN_ROOTFS/usr/lib:\$(sanitizeEnvVar "\$LIBPATH" ":" "^\$ZOPEN_PKGINSTALL/.*\$")
    LIBPATH=\$(deleteDuplicateEntries \"\$LIBPATH\" \":\")
    MANPATH=\$ZOPEN_ROOTFS/usr/share/man:\$ZOPEN_ROOTFS/usr/share/man/\%L:\$(sanitizeEnvVar \"\$MANPATH\" \":\" \"^\$ZOPEN_PKGINSTALL/.*\$\")
    MANPATH=\$(deleteDuplicateEntries \"\$MANPATH\" \":\")
  done < \$TMP_FIFO_PIPE
  [[ ! -p \$TMP_FIFO_PIPE ]] || rm -f \$TMP_FIFO_PIPE
  /bin/echo "\047[1A\047[\$30D\047[2K- Processed zopen config: 100% (\${dotenvcnt}/\${dotenvcnt})"
  unset dotenvs dotenvcnt flecnt
fi
MANPATH="\$MANPATH:"
export MANPATH
export LIBPATH
export PATH
EOF

printVerbose "Setting configuration file as read-only to user, no access to others"
chmod 400 $HOME/.zopen-config
printInfo "- Created config in $HOME/.zopen-config."

printInfo "- Root FS available at $rootfs"
export ZOPEN_ROOTFS=$rootfs
printInfo "- Running bootstrap"
curlpax="curl-7.83.1.20230120_231325.zos.pax.Z"
curlurl="https://github.com/ZOSOpenTools/curlport/releases/download/curlport_420/$curlpax"
bootstrap=$($utildir/zopen-bootstrap.rexx $curlurl)
printInfo "- Bootstrapped curl downloaded. Configuring for use..."
printVerbose "- Expanding curl..."
cachedir="$rootfs/var/cache/zopen"
[[ -e $cachedir/$curlpax ]] || printError "Could not locate downloaded curl pax."
paxrc=$(pax -rf $cachedir/$curlpax -s##$rootfs/boot/#)

# Need to source the .env file from within the actual curl directory and cannot
# spawn sub-process otherwise no access to environment from this script so run inline
curlfile="$(ls $rootfs/boot |grep curl)"
[[ -e $rootfs/boot/$curlfile ]] || printError "Could not locate curl for bootstrap. Re-run 'zopen init' to retry"
chmod -R 755 $rootfs/boot/$curlfile
curwd=$PWD
cd $rootfs/boot/$curlfile/
. .env
cd $curwd

printInfo "- Updating CA cert [to resolve previous SSL_CERT_FILE warnings]"
ZOPEN_CA="$ZOPEN_ROOTFS/$ZOPEN_CA_DIR"
mkdir -p $ZOPEN_CA
ZOPEN_CA="$ZOPEN_CA/cacert.pem"
export ZOPEN_CA
runAndLog "${utildir}/zopen-update-cacert -i -f"
printInfo "- Sourcing environment"
. $HOME/.zopen-config
printInfo "- Using bootstrapped curl to install latest release of itself (if available)"
runAndLog "${utildir}/zopen-download curl"

# Code to use this version of meta as "official" install - pin to ensure no overwriting
printInfo "- Installing and pinning current (this forked) version of meta" 
printInfo "Current dir: $utildir"
metadtInstDir="$ZOPEN_ROOTFS/$zopen_pkginstall/meta-dt"
mkdir -p $metadtInstDir
cp -RT ../  $metadtInstDir
printInfo "- Running alternative utility to allow selection of forked meta"
runAndLog "${utildir}/zopen-alt meta -s"


#TODO: Reinstate following code should this fork merge
#printInfo "- Installing latest version of meta package into zopen system"
#runAndLog "${utildir}/zopen-download meta"

printInfo "- zopen bootstrapping complete"

printInfo "- Configure .profile to automatically source zopen environment (y/n)?"
profileEnable=$(getInput)
if [ -z profileEnable ] & [ "xyx" = "x${profileEnable}x" ]; then
  if ! grep -q ". \$HOME/.zopen-config" "$HOME/.profile"; then
    printVerbose "Line not present (grep returned non-0)"
cat << EOF >>  "$HOME/.profile"
[[ -e "\$HOME/.zopen-config" ]] && . \$HOME/.zopen-config
EOF
  fi
fi
printInfo "${NC}${YELLOW}- Run '. \$HOME/.zopen-config' to enable zopen environment for current session${NC}"
syslog $ZOPEN_LOG_PATH/audit.log $LOG_A "$CAT_PACKAGE,$CAT_FILE" "INIT" "" "zopen environment initialised as $ZOPEN_ROOTFS"
printInfo "${NC}${GREEN}zopen initialization complete.${NC}"

