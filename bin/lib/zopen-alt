#!/bin/sh
# "Alternatives" utility for z/OS Open Tools - https://github.com/ZOSOpenTools

export utildir="$( cd "$(dirname "$0")" >/dev/null 2>&1 && pwd -P )"

. "${utildir}/common.inc"

printSyntax() 
{
  args=$*
  echo "zopen alt is a utility for z/OS Open Tools to switch package versions for currently installed packages" >&2
  echo "Syntax: zopen-alt [<option>]* [<package]" >&2
  echo "  where <option> may be one or more of:" >&2
  echo "  --set: set version" >&2
  echo "  -v: run in verbose mode." >&2
  echo " and <package> is a package name." >&2
}

symlinkIntoSystem(){
  name=$1
  installdir=$ZOPEN_PKGINSTALL
  nosymlink=false 
# The above vars are used to keep the code below in sync with zopen-download  
  if ! $nosymlink; then
    printInfo "Integrating package into file system"
    basedir=$installdir/$name/
    target=$ZOPEN_ROOTFS/usr
    dirs=$(zosfind $basedir -type d | grep -v ".git" | sort -r)
    ndirs=$(echo "$dirs" | wc -l | tr -d ' ')
    dircnt=0
    echo "  ${dircnt}/${ndirs}   0%"
    echo "$dirs" | while read dir; do
      dircnt=$(expr $dircnt + 1)
      trimdir=$(echo $dir | sed "s#^$basedir##")
      if [[ ! "x$trimdir" = "x" ]]; then 
        mkdir -p $target/$trimdir
        filestolink=$(zosfind $dir -type f)
        nfiles=$(echo "$filestolink" | wc -l | tr -d ' ')
        if [ $nfiles -eq 0 ]; then
          flecnt=0
          pct=0
          ansiupdate 3 -30 "${ERASELINE}Processing ${dircnt} of ${ndirs}: ${pct}% (${flecnt}/${nfiles})"
          echo "$filestolink" | while read filetolink; do
            flecnt=$(expr $flecnt + 1)
            pct=`expr $flecnt \* 100`
            pct=`expr $pct / $nfiles`
            ansiupdate 3 -30 "${ERASELINE}Processing ${dircnt} of ${ndirs}: ${pct}% (${flecnt}/${nfiles})"
            trimfile=$(echo $filetolink | sed "s#^$basedir##")
            if [ ! -z "$trimfile" ]; then
              ln -fs $filetolink $target/$trimfile
            fi
          done
        fi
      fi
    done
    ansiupdate 3 -30 "${ERASELINE}Processed ${ndirs} of ${ndirs}"
    printInfo "Integration complete"
  fi
}

setAlt(){
  i=$1
  needle=$2
  printVerbose "Setting alternative"
    valid=false
    while ! $valid; do
      echo "Enter alternative version to use (1-$i): "
      selection=$(getInput)
      if [[ ! -z "$(echo $selection | sed -e 's/[0-9]*//')" ]]; then
        echo "Invalid input, must be a number between 1 and $i"
      elif [ "$selection" -ge 1 ] && [ "$selection" -le "$i" ]; then
        valid=true
      fi
    done
    if [ ! $selection -eq $current ]; then
      newver="$(echo $found | awk -v selection=$selection '
        BEGIN {count=0}
              {count = count + 1; if (count=selection) { print $(selection)} }
      ')"
      printInfo "Setting alternative: $selection: $newver"
      printVerbose "Removing symlinks from current version"
      $utildir/zopen-remove $needle --silent
      [ -d $newver ] || printError "Mismatch found, no version directory at $newver" 
      [ ! -z "$needle" ] || printError "$ZOPEN_PKGINSTALL/$needle not found"
      printVerbose "Removing master link"
      rm -rf $ZOPEN_PKGINSTALL/$needle

      printVerbose "Generating main link from $needle to version: $newver"
      if ! ln -sf $newver $ZOPEN_PKGINSTALL/$needle; then
        printError "Could not create symbolic link name"
      fi
      symlinkIntoSystem $needle
      touch "${ZOPEN_PKGINSTALL}/${needle}/.installed"
      version="unknown"
      if [ -e "${ZOPEN_PKGINSTALL}/${needle}/.releaseinfo" ]; then
        version=$(cat "${ZOPEN_PKGINSTALL}/${needle}/.releaseinfo")
      fi
      syslog $ZOPEN_LOG_PATH/audit.log "ALT_SET" "${needle}" "version:$version;"
    else
      printInfo "Selection is already current version."
      exit 0
    fi
}

listAlts(){
  sett=$1
  needle=$2
  found=$(zosfind $ZOPEN_PKGINSTALL -name "*/${needle}-*" -prune -type d -o -type l | grep "/${needle}-[^/]*")
  if [[ -z $found ]]; then
    printInfo "No currently installed version of package '${needle}'"
    exit 4
  fi
  if [ -e $ZOPEN_PKGINSTALL/$needle ]; then
    deref=$(ls -l $ZOPEN_PKGINSTALL/$needle | awk '{ print $(NF) }')
    printVerbose "Current version: ${deref#$ZOPEN_PKGINSTALL/}"
  fi

  i=0
  current=0
# the below would be simpler, but creates a subshell so can't get the number of entries outside!  
#  echo "$found" | xargs | tr ' ' '\n' | while read repo; do
  TMP_FIFO_PIPE="$HOME/altselect.pipe"
  [[ ! -p $TMP_FIFO_PIPE ]] || rm -f $TMP_FIFO_PIPE
  mkfifo $TMP_FIFO_PIPE
  echo "$found" | xargs | tr ' ' '\n'>> $TMP_FIFO_PIPE &
  while read repo; do
    printVerbose "Parsing repo: '$repo' as '${repo#$ZOPEN_PKGINSTALL/}'"

    if [[ "${repo}" = "${repo#$ZOPEN_PKGINSTALL/}" ]]; then
      printVerbose "Working around possible bug in FIFO that converts initial char to alert/bell 0x07/'\a'"
      if ! odloc="$(type "$od")" || [[ -z $odloc ]]; then
        out=$(echo "${repo}" | od -cx)
        printVerbose "String details:\n '$out'"
      fi
      repo="/$(echo $repo | cut -b 2-)"
      printVerbose "Repo:='$repo'"
    fi
    i=$(expr $i + 1)
    if [[ "${deref#$ZOPEN_PKGINSTALL/}" = "${repo#$ZOPEN_PKGINSTALL/}" ]]; then
      current=$i
      printInfo "${NC}${GREEN}$i: ${repo#$ZOPEN_PKGINSTALL/}  <-  current${NC}"
    else
      printInfo "$i: ${repo#$ZOPEN_PKGINSTALL/}"
    fi
  done < $TMP_FIFO_PIPE
  [[ ! -p $TMP_FIFO_PIPE ]] || rm -f $TMP_FIFO_PIPE
  
  if $sett; then
    setAlt $i $needle
    unset $sett
    listAlts false $needle
  fi
  exit 0
}


# Main code start here
args=$*
verbose=false
sett=false
if [[ $# -eq 0 ]]; then
  printError "No option provided for query"
fi
while [[ $# -gt 0 ]]; do
  printVerbose "Parsing option: $1"
  case "$1" in
    "-s" | "--set")
      sett=true
      ;;
    "-h" | "--h" | "-help" | "--help" | "-?" | "-syntax")
      printSyntax "${args}"
      exit 4
      ;;
    "-v" | "--v" | "-verbose" | "--verbose")
      verbose=true
      ;;
    *)
      packageList="$packageList $1";
      ;;
  esac
  shift;
done

[[ -z "$packageList" ]] || listAlts $sett $packageList
printError "No action verb specified"
