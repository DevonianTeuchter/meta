#!/bin/sh
#
# Updates the cacert in zopen meta root directory
#
if [ -z "$utildir" ]; then
  export mydir="$( cd "$(dirname "$0")" >/dev/null 2>&1 && pwd -P )"
else
  mydir="$utildir"
fi

. "${mydir}/common.inc"

if [ -z "$ZOPEN_CA" ]; then
  ZOPEN_CA="${mydir}/../../cacert.pem"
fi

# Temporary files
for tmp in "$TMPDIR" "$TMP" /tmp
do
  if [ ! -z "$tmp" ] && [ -d "$tmp" ]; then
    TEMP_CACERT="$tmp/$LOGNAME.$RANDOM.cacert.pem"
    break
  fi
done

cleanupOnExit() {
    rv=$?
    [ -f "$TEMP_CACERT" ] && rm -rf "$TEMP_CACERT"
    exit $rv
}

trap "cleanupOnExit" EXIT INT TERM QUIT HUP

printHelp() 
{
  args=$*
  echo "zopen-update-cacert:"
  echo "  Update your cacert.pem file to the latest curl CA certificates extracted from Mozilla"
  echo "Syntax:"
  echo "  zopen-update-cacert [-fhv] [<directory>]"
  echo "Options:"
  echo "  -f|--force: update cacert.pem file even if it may be up to date"
  echo "  -h|--help: print this help"
  echo "  -v|--verbose: print verbose messages"
  echo "Parameters:"
  echo "  <directory>: the directory where the cacert.pem will be updated"
  echo "    The default directory location is: ${default_dir}"
}

getCACertFromCurl()
{
  curlOptions="$1"
  # Get latest CACert from Mozilla through Curl
  printVerbose "Using $(type curl)"
  printVerbose "Downloading ${cacert_update_url}"
  nocertverify=""
  if [ ! -f "$SSL_CERT_FILE" ]; then
    printVerbose "No cacert file present"
    if $insecureFallback; then 
      printWarning "Using insecure fallback"
      nocertverify="-k "
    fi
  fi
  curlver="$(type curl)"
  crc=$?
  [ $crc -ne 0 ] && printError "Could not locate curl to download certificate."

  printVerbose "Type of curl: $curlver"
  if ! curl -L "$nocertverify" -o "$TEMP_CACERT" ${cacert_update_url} ; then
    printError "curl command could not download from: ${cacert_update_url}"
  fi

  if [ ! -f "$TEMP_CACERT" ]; then
    printError "$TEMP_CACERT was not downloaded"
  fi
}

updateCACert()
{
  printInfo "Re-creating $ZOPEN_CA"
  cp "$TEMP_CACERT" "$ZOPEN_CA"
}

# Main code start here
export mydir="$( cd "$(dirname "$0")" >/dev/null 2>&1 && pwd -P )"

. "${mydir}/common.inc"
verbose=false
export default_dir="$( cd "${mydir}/../../" && pwd -P )"
export cacert_update_url="https://curl.se/ca/cacert.pem"

# Temporary files
for tmp in "$TMPDIR" "$TMP" /tmp
do
  if [ ! -z "$tmp" ] && [ -d "$tmp" ]; then
    TEMP_CACERT="$tmp/$LOGNAME.$RANDOM.cacert.pem"
    break
  fi
done

if [ -z "$TEMP_CACERT" ]; then
  printError "Could not find a temporary write location in \$TMPDIR, \$TMP, or /tmp"
fi

dir="${default_dir}"
args=$*
forceUpdate=false
insecureFallback=false
while [[ $# -gt 0 ]]; do
  case "$1" in
    "-f" | "-force" | "--force")
      forceUpdate=true;
      ;;
    "-h" | "--h" | "-help" | "--help" | "-?" | "-syntax")
      printHelp "${args}"
      exit 4
      ;;
    "-i" | "--insecure-fallback")
      insecureFallback=true
      ;;
    "-v" | "--v" | "-verbose" | "--verbose")
      verbose=true
      ;;
    *)
      if [ "${1#-*}" = "$1" ]; then
        dir="$1"
      else
        echo "Unknown option: $1"
        printHelp "${args}"
        exit 8
      fi
      ;;
  esac
  shift;
done

if ! [ -r "${ZOPEN_CA}" ]; then
  forceUpdate=true 
fi

printHeader "Getting latest CA Certificate"
if ! getCACertFromCurl; then
  if ! getCACertFromCurl -4; then # Try again with ipv4
    printError "Curl failed to download CA Certificate"
  fi
fi


if $forceUpdate; then
  updateCACert
elif ! diff "$TEMP_CACERT" "$ZOPEN_CA" >/dev/null; then
  while true; do
    printWarning "Your local cacert '$ZOPEN_CA' is outdated or does not exist. Would you like to update it? (y, n)"
    update=$(getInput)
    if [ "$update" = "n" ]; then
      exit 0
    elif [ "$update" = "y" ]; then
      break
    fi
  done

  updateCACert
else
  printInfo "Your cacert '$ZOPEN_CA' is already up to date"
fi
